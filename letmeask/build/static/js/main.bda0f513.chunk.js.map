{"version":3,"sources":["services/firebase.ts","contexts/AuthContext.tsx","contexts/ThemeContext.tsx","assets/images/logo.svg","assets/images/delete.svg","assets/images/check.svg","assets/images/answer.svg","components/Button.tsx","components/Question.tsx","assets/images/copy.svg","components/RoomCode.tsx","hooks/useAuth.ts","hooks/useRoom.ts","pages/AdminRoom.tsx","assets/images/illustration.svg","assets/images/google-icon.svg","pages/Home.tsx","hooks/usetTheme.ts","pages/NewRoom.tsx","pages/Room.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","AuthContext","createContext","AuthContextProvider","props","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","ThemeContext","ThemeContextProvider","storagedTheme","localStorage","getItem","currentTheme","setCurrentTheme","setItem","theme","toggleTheme","Button","isOutlined","className","Question","content","author","isAnswered","isHighligted","cx","answered","hilighted","src","alt","RoomCode","onClick","navigator","clipboard","writeText","code","copyImg","useAuth","useContext","useRoom","roomId","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","likeCount","values","likes","length","likeId","find","authorId","off","AdminRoom","history","useHistory","useParams","update","endedAt","Date","push","questionId","window","confirm","remove","logoImg","question","type","heandleCheckQuestionAsAnswered","checkImg","heandleHighligthQuestion","answerImg","heandleDeleteQuestion","deleteImg","Home","roomCode","setRoomCode","event","preventDefault","trim","get","exists","alert","ilustrationImg","googleIconUmg","onSubmit","placeholder","onChange","target","NewRoom","newRoom","setNewRoom","firebaseRoom","to","Room","params","newQuestion","setNewQuestion","disabled","aria-label","heandleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gVAeAA,IAASC,cAVc,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,oDACbG,UAAWH,gBACXI,cAAeJ,gBACfK,kBAAmBL,gBACnBM,MAAON,+CAKX,IAAMO,EAAMV,IAASU,OACfC,EAAUX,IAASW,W,OCDZC,EAAcC,wBAAc,IAElC,SAASC,EAAoBC,GAAkC,IAAD,EAEzCC,qBAFyC,mBAE1DC,EAF0D,KAEpDC,EAFoD,iDAyBjE,sCAAAC,EAAA,6DACQC,EAAW,IAAIpB,IAASU,KAAKW,mBADrC,SAEuBX,EAAKY,gBAAgBF,GAF5C,YAEQG,EAFR,QAIaN,KAJb,qBAK2CM,EAAON,KAAtCO,EALZ,EAKYA,YAAaC,EALzB,EAKyBA,SAAUC,EALnC,EAKmCA,IAE1BF,GAAgBC,EAPzB,sBAQY,IAAIE,MAAM,yCARtB,OAUIT,EAAQ,CACNU,GAAIF,EACJG,KAAML,EACNM,OAAQL,IAbd,4CAzBiE,sBA2CjE,OAvCAM,qBAAU,WACR,IAAMC,EAActB,EAAKuB,oBAAmB,SAAChB,GAC3C,GAAIA,EAAM,CAAC,IACDO,EAA+BP,EAA/BO,YAAaC,EAAkBR,EAAlBQ,SAAUC,EAAQT,EAARS,IAE/B,IAAKF,IAAgBC,EACnB,MAAM,IAAIE,MAAM,yCAElBT,EAAQ,CACNU,GAAIF,EACJG,KAAML,EACNM,OAAQL,QAKd,OAAO,WACLO,OAED,IAqBC,cAACpB,EAAYsB,SAAb,CAAsBC,MAAO,CAAElB,OAAMmB,iBA5CwB,4CA4C7D,SACKrB,EAAMsB,WCnDZ,IAAMC,EAAezB,wBAAc,IAEnC,SAAS0B,EAAqBxB,GAAmC,IAAD,EAC7BC,oBAAgB,WACtD,IAAMwB,EAAgBC,aAAaC,QAAQ,SAE3C,cAAQF,QAAR,IAAQA,IAAiB,WAJ0C,mBAC9DG,EAD8D,KAChDC,EADgD,KAerE,OARAb,qBAAU,WACRU,aAAaI,QAAQ,QAASF,KAC7B,CAACA,IAOF,cAACL,EAAaJ,SAAd,CAAuBC,MAAO,CAAEW,MAAOH,EAAcI,YALvD,WACEH,EAAiC,UAAjBD,EAA2B,OAAS,WAIpD,SACG5B,EAAMsB,WChCE,UAA0B,iCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,mC,sBCOlC,SAASW,EAAT,GAA8D,IAAD,IAA5CC,kBAA4C,SAArBlC,EAAqB,8BAE5D,OACA,oCACAmC,UAAS,iBAAYD,EAAa,WAAa,KAAUlC,I,2BCM1D,SAASoC,EAAT,GAMY,IALfC,EAKc,EALdA,QACAC,EAIc,EAJdA,OACAhB,EAGc,EAHdA,SAGc,IAFdiB,kBAEc,aADdC,oBACc,SACd,OACI,sBACAL,UAAWM,IACP,WACA,CAACC,SAAUH,GACX,CAACI,UAAWH,IAAiBD,IAJjC,UAMI,4BAAKF,IACL,mCACI,sBAAKF,UAAU,YAAf,UACI,qBAAKS,IAAMN,EAAOvB,OAAS8B,IAAMP,EAAOxB,OACxC,+BAAQwB,EAAOxB,UAEnB,8BAAOQ,UCrCR,UAA0B,iC,MCQlC,SAASwB,EAAS9C,GAMrB,OACI,yBAAQmC,UAAU,YAAYY,QALlC,WACIC,UAAUC,UAAUC,UAAUlD,EAAMmD,OAIpC,UACI,8BACI,qBAAKP,IAAMQ,EAAUP,IAAI,+BAE7B,0CAAc7C,EAAMmD,WChBzB,SAASE,IAGZ,OAFeC,qBAAWzD,GC6BvB,SAAS0D,EAAQC,GAAiB,IAC/BtD,EAASmD,IAATnD,KAD8B,EAEFD,mBAAyB,IAFvB,mBAE7BwD,EAF6B,KAElBC,EAFkB,OAGVzD,mBAAS,IAHC,mBAG7B0D,EAH6B,KAGtBC,EAHsB,KAwCtC,OAlCA5C,qBAAU,WACR,IAAM6C,EAAUjE,EAASkE,IAAT,gBAAsBN,IA4BtC,OA1BDK,EAAQE,GAAG,SAAS,SAACC,GAAU,IAAD,EAErBC,EAAeD,EAAKE,MAEpBC,EAAoC,UAAGF,EAAaR,iBAAhB,QAA6B,GAGjEW,EAAkBC,OAAOC,QAAQH,GAAmBI,KACxD,YAAmB,IAAD,yBAAhBC,EAAgB,KAAXpD,EAAW,KAChB,MAAO,CACLP,GAAI2D,EACJnC,QAASjB,EAAMiB,QACfC,OAAQlB,EAAMkB,OACdE,aAAcpB,EAAMoB,aACpBD,WAAYnB,EAAMmB,WAClBkC,UAAWJ,OAAOK,OAAP,UAActD,EAAMuD,aAApB,QAA6B,IAAIC,OAC5CC,OAAM,UAAER,OAAOC,QAAP,UAAelD,EAAMuD,aAArB,QAA8B,IAAIG,MAAK,oDAAqBC,YAAL,OAAkB7E,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAMW,cAAjF,aAAE,EAAqF,OAMnG+C,EAASK,EAAaN,OACtBD,EAAaU,MAGR,WACLP,EAAQmB,IAAI,YAEb,CAACxB,EAAD,OAAStD,QAAT,IAASA,OAAT,EAASA,EAAMW,KAEX,CAAE4C,YAAWE,S,MCpDf,SAASsB,IAEd,IAAMC,EAAUC,cAEV3B,EADS4B,cACOvE,GAJI,EAOG0C,EAAQC,GAA7BG,EAPkB,EAOlBA,MAAOF,EAPW,EAOXA,UAPW,4CAU1B,sBAAArD,EAAA,sEACOR,EAASkE,IAAT,gBAAsBN,IAAU6B,OAAO,CAC3CC,QAAS,IAAIC,OAFhB,OAICL,EAAQM,KAAK,KAJd,4CAV0B,kEAiB1B,WAAqCC,GAArC,SAAArF,EAAA,0DACKsF,OAAOC,QAAQ,yDADpB,gCAEU/F,EAASkE,IAAT,gBAAsBN,EAAtB,sBAA0CiC,IAAcG,SAFlE,4CAjB0B,kEAuB1B,WAA8CH,GAA9C,SAAArF,EAAA,sEACQR,EAASkE,IAAT,gBAAsBN,EAAtB,sBAA0CiC,IAAcJ,OAAO,CACnE9C,YAAY,IAFhB,4CAvB0B,kEA6B1B,WAAwCkD,GAAxC,SAAArF,EAAA,sEACQR,EAASkE,IAAT,gBAAsBN,EAAtB,sBAA0CiC,IAAcJ,OAAO,CACnE7C,cAAc,IAFlB,4CA7B0B,sBAmC1B,OACE,sBAAK3B,GAAG,YAAR,UACE,iCACE,sBAAKsB,UAAU,UAAf,UACE,qBAAKS,IAAKiD,EAAShD,IAAI,aACvB,gCACE,cAACC,EAAD,CAAUK,KAAMK,IAChB,cAACvB,EAAD,CAAQC,YAAU,EAACa,QA1CH,2CA0ChB,mCAMN,iCACE,sBAAKZ,UAAU,aAAf,UACE,uCAAUwB,KACTF,EAAUmB,OAAS,GAAK,iCAAOnB,EAAUmB,OAAjB,qBAG3B,qBAAKzC,UAAU,gBAAf,SACGsB,EAAUc,KAAI,SAACuB,GACd,OACE,eAAC1D,EAAD,CAEAC,QAASyD,EAASzD,QAClBC,OAAQwD,EAASxD,OACjBC,WAAYuD,EAASvD,WACrBC,aAAcsD,EAAStD,aALvB,WAQGsD,EAASvD,YACT,qCACC,wBACIwD,KAAK,SACLhD,QAAU,kBArEJ,2CAqEUiD,CAA+BF,EAASjF,KAF5D,SAII,qBAAK+B,IAAKqD,EAAUpD,IAAI,sDAG1B,wBACEkD,KAAK,SACLhD,QAAU,kBA5EJ,2CA4EUmD,CAAyBJ,EAASjF,KAFpD,SAIE,qBAAK+B,IAAKuD,EAAWtD,IAAI,iCAK/B,wBACEkD,KAAK,SACLhD,QAAU,kBArFA,2CAqFMqD,CAAsBN,EAASjF,KAFjD,SAIE,qBAAK+B,IAAKyD,EAAWxD,IAAI,yBA7BxBiD,EAASjF,eC/Eb,UAA0B,yCCA1B,MAA0B,wC,MCkBlC,SAASyF,IAEd,IAAMpB,EAAUC,cAFK,EAGc9B,IAA3BnD,EAHa,EAGbA,KAAMmB,EAHO,EAGPA,iBAHO,ECdPiC,qBAAW/B,GDkBjBQ,EAJa,EAIbA,MAAOC,EAJM,EAINA,YAJM,EAKa/B,mBAAS,IALtB,mBAKbsG,EALa,KAKHC,EALG,iDAOrB,sBAAApG,EAAA,yDACOF,EADP,gCAEUmB,IAFV,OAIE6D,EAAQM,KAAK,cAJf,4CAPqB,kEAcrB,WAA+BiB,GAA/B,eAAArG,EAAA,yDACEqG,EAAMC,iBAEiB,KAApBH,EAASI,OAHd,iEAOwB/G,EAASkE,IAAT,gBAAsByC,IAAYK,MAP1D,WAOQ/C,EAPR,QAUcgD,SAVd,uBAYIC,MAAM,4BAZV,8BAgBKjD,EAAQK,MAAMoB,QAhBnB,wBAiBIwB,MAAM,uCAjBV,2BAqBE5B,EAAQM,KAAR,iBAAuBe,IArBzB,6CAdqB,sBAuCrB,OACE,sBAAK1F,GAAG,YAAYsB,UAAWJ,EAA/B,UACE,kCACE,qBACEa,IAAKmE,EACLlE,IAAI,2DAEN,+DACA,wFAEF,+BACE,sBAAKV,UAAU,eAAf,UAEE,6BAAKJ,IACL,wBAAQgB,QAAUf,EAAlB,oBAEA,qBAAKY,IAAKiD,EAAShD,IAAI,qBACvB,yBAAQE,QAxDK,2CAwDyBZ,UAAU,cAAhD,UACE,qBAAKS,IAAKoE,EAAenE,IAAI,mBAD/B,gCAIA,qBAAKV,UAAU,YAAf,kCACA,uBAAM8E,SA7DO,4CA6Db,UACE,uBACAlB,KAAK,OACLmB,YAAY,6BACZC,SAAU,SAAAV,GAAK,OAAGD,EAAYC,EAAMW,OAAOhG,QAC3CA,MAAQmF,IAER,cAACtE,EAAD,CAAQ8D,KAAK,SAAb,uCE5EL,SAASsB,IAAW,IAAD,EACOpH,mBAAS,IADhB,mBACjBqH,EADiB,KACPC,EADO,KAEhBrH,EAAQmD,IAARnD,KACFgF,EAAUC,cAHQ,4CAKxB,WAAgCsB,GAAhC,iBAAArG,EAAA,yDACEqG,EAAMC,iBAEc,KAAjBY,EAAQX,OAHb,wDAMQ9C,EAAUjE,EAASkE,IAAI,SAN/B,SAQ6BD,EAAQ2B,KAAK,CACtC7B,MAAO2D,EACPvC,SAAQ,OAAE7E,QAAF,IAAEA,OAAF,EAAEA,EAAMW,KAVpB,OAQQ2G,EARR,OAaEtC,EAAQM,KAAR,iBAAuBgC,EAAahD,MAbtC,4CALwB,sBAqBxB,OACE,sBAAK3D,GAAG,YAAR,UACE,kCACE,qBACE+B,IAAKmE,EACLlE,IAAI,2DAEN,+DACA,wFAEF,+BACE,sBAAKV,UAAU,eAAf,UACE,qBAAKS,IAAKiD,EAAShD,IAAI,qBACvB,qDACA,uBAAMoE,SAnCU,4CAmChB,UACE,uBACAlB,KAAK,OACLmB,YAAY,eACZC,SAAY,SAAAV,GAAK,OAAIc,EAAWd,EAAMW,OAAOhG,QAC7CA,MAAUkG,IAGV,cAACrF,EAAD,CAAQ8D,KAAK,SAAb,2BAEF,mEACoC,cAAC,IAAD,CAAM0B,GAAG,IAAT,oCClCvC,SAASC,IAAQ,IACdxH,EAASmD,IAATnD,KACFyH,EAASvC,cAFM,EAGiBnF,mBAAS,IAH1B,mBAGd2H,EAHc,KAGDC,EAHC,KAIfrE,EAASmE,EAAO9G,GAJD,EAKQ0C,EAAQC,GAA7BG,EALa,EAKbA,MAAOF,EALM,EAKNA,UALM,4CASrB,WAAkCgD,GAAlC,eAAArG,EAAA,yDACEqG,EAAMC,iBAEqB,KAAvBkB,EAAYjB,OAHlB,oDAMOzG,EANP,sBAOU,IAAIU,MAAM,iCAPpB,cAUQkF,EAAW,CACfzD,QAASuF,EACTtF,OAAQ,CACNxB,KAAMZ,EAAKY,KACXC,OAAQb,EAAKa,QAEfyB,cAAc,EACdD,YAAY,GAjBhB,SAoBQ3C,EAASkE,IAAT,gBAAsBN,EAAtB,eAA0CgC,KAAKM,GApBvD,OAqBE+B,EAAe,IArBjB,4CATqB,kEAkCrB,WAAmCpC,EAAoBZ,GAAvD,SAAAzE,EAAA,0DACMyE,EADN,gCAEUjF,EAASkE,IAAT,gBAAsBN,EAAtB,sBAA0CiC,EAA1C,kBAA8DZ,IAAUe,SAFlF,6CAIWhG,EAASkE,IAAT,gBAAsBN,EAAtB,sBAA0CiC,EAA1C,WAA8DD,KAAK,CACvET,SAAQ,OAAE7E,QAAF,IAAEA,OAAF,EAAEA,EAAMW,KALvB,4CAlCqB,sBA4CrB,OACE,sBAAKA,GAAG,YAAR,UACE,iCACE,sBAAKsB,UAAU,UAAf,UACE,qBAAKS,IAAKiD,EAAShD,IAAI,aACvB,cAACC,EAAD,CAAUK,KAAMK,SAIpB,iCACE,sBAAKrB,UAAU,aAAf,UACE,uCAAUwB,KACTF,EAAUmB,OAAS,GAAK,iCAAOnB,EAAUmB,OAAjB,qBAG3B,uBAAMqC,SA3DS,4CA2Df,UACE,0BACEC,YAAY,gCACZC,SAAU,SAACV,GAAD,OAAWoB,EAAepB,EAAMW,OAAOhG,QACjDA,MAAOwG,IAET,sBAAKzF,UAAU,cAAf,UACGjC,EACC,sBAAKiC,UAAU,YAAf,UACE,qBAAKS,IAAK1C,EAAKa,OAAQ8B,IAAK3C,EAAKY,OACjC,+BAAOZ,EAAKY,UAGd,8DAC4B,2DAG9B,cAACmB,EAAD,CAAQ8D,KAAK,SAAS+B,UAAW5H,EAAjC,mCAKJ,qBAAKiC,UAAU,gBAAf,SACGsB,EAAUc,KAAI,SAACuB,GACd,OACE,cAAC1D,EAAD,CAEEC,QAASyD,EAASzD,QAClBC,OAAQwD,EAASxD,OACjBC,WAAYuD,EAASvD,WACrBC,aAAcsD,EAAStD,aALzB,UAOIsD,EAASvD,YACT,yBACAJ,UAAS,sBAAiB2D,EAASjB,OAAS,QAAU,IACpDkB,KAAK,SACLgC,aAAW,qBACXhF,QAAU,kBAhGP,6CAgGYiF,CAAoBlC,EAASjF,GAAIiF,EAASjB,SAJ3D,UAMEiB,EAASrB,UAAY,GAAK,qCAAQqB,EAASrB,UAAjB,OAC5B,qBAAKwD,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,SACE,sBAAMC,EAAE,kiBAAkiBC,OAAO,UAAUC,YAAY,MAAMC,cAAc,QAAQC,eAAe,gBAfjnB5C,EAASjF,eC9Ef8H,MAlBf,WAEE,OACE,cAAC,IAAD,UACA,cAACnH,EAAD,UACC,cAACzB,EAAD,UACE,eAAC,IAAD,WACC,cAAC,IAAD,CAAO6I,KAAK,IAAIC,OAAK,EAACC,UAAWxC,IACjC,cAAC,IAAD,CAAOsC,KAAK,aAAaE,UAAWzB,IACpC,cAAC,IAAD,CAAOuB,KAAK,aAAaE,UAAWpB,IACpC,cAAC,IAAD,CAAOkB,KAAK,mBAAmBE,UAAW7D,c,MCdlD8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bda0f513.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth= firebase.auth();\r\nconst database= firebase.database();\r\n\r\nexport {firebase, auth, database };","import { createContext, ReactNode, useState, useEffect } from \"react\";\r\nimport { auth, firebase } from \"../services/firebase\";\r\n\r\ntype User = {\r\n    id: string;\r\n    name: string;\r\n    avatar: string;\r\n  };\r\n  type AuthContextType = {\r\n    user: User | undefined;\r\n    signInWithGoogle: () => Promise<void>;\r\n  }\r\n\r\n  type AuthContextProviderProps = {\r\n      children: ReactNode;\r\n  }\r\n  \r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps) {\r\n\r\n    const [user, setUser] = useState<User>();\r\n\r\n    useEffect(() => {\r\n      const unsubscribe = auth.onAuthStateChanged((user) => {\r\n        if (user) {\r\n          const { displayName, photoURL, uid } = user;\r\n  \r\n          if (!displayName || !photoURL) {\r\n            throw new Error(\"Faltando informações do Google.\");\r\n          }\r\n          setUser({\r\n            id: uid,\r\n            name: displayName,\r\n            avatar: photoURL,\r\n          });\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, []);\r\n  \r\n    async function signInWithGoogle() {\r\n      const provider = new firebase.auth.GoogleAuthProvider();\r\n      const result = await auth.signInWithPopup(provider);\r\n  \r\n      if (result.user) {\r\n        const { displayName, photoURL, uid } = result.user;\r\n  \r\n        if (!displayName || !photoURL) {\r\n          throw new Error(\"Faltando informações do Google.\");\r\n        }\r\n        setUser({\r\n          id: uid,\r\n          name: displayName,\r\n          avatar: photoURL,\r\n        });\r\n      }\r\n    }\r\n\r\n    return(\r\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n","import { createContext, ReactNode, useEffect, useState } from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\";\r\n\r\ntype ThemeContextProviderProps = {\r\n  children: ReactNode;\r\n};\r\n\r\ntype ThemeContextType = {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n};\r\n\r\nexport const ThemeContext = createContext({} as ThemeContextType);\r\n\r\nexport function ThemeContextProvider(props: ThemeContextProviderProps) {\r\n  const [currentTheme, setCurrentTheme] = useState<Theme>(() => {\r\n    const storagedTheme = localStorage.getItem(\"theme\");\r\n\r\n    return (storagedTheme ?? \"light\") as Theme;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  function toggleTheme() {\r\n    setCurrentTheme(currentTheme === \"light\" ? \"dark\" : \"light\");\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme: currentTheme, toggleTheme }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","import { ButtonHTMLAttributes } from 'react';\r\nimport '../styles/button.scss';\r\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\r\n    isOutlined?: boolean;\r\n};\r\n\r\n\r\nexport function Button({isOutlined = false, ...props}: ButtonProps) {\r\n\r\n        return (\r\n        <button \r\n        className={`button ${isOutlined ? 'outlined' : ''}`} {...props}/>\r\n    )\r\n}\r\n","import { ReactNode } from 'react';\r\nimport cx from 'classnames';\r\n\r\n//importação da estilização\r\nimport '../styles/question.scss';\r\n\r\ntype QuestionProps = {\r\n    content: string;\r\n    author: {\r\n        name: string;\r\n        avatar: string;\r\n    };\r\n    children?: ReactNode;\r\n    isAnswered?: boolean;\r\n    isHighligted?: boolean;\r\n}\r\n\r\nexport function Question({\r\n    content,\r\n    author,\r\n    children,\r\n    isAnswered = false,\r\n    isHighligted = false,\r\n}: QuestionProps) {\r\n    return(\r\n        <div \r\n        className={cx(\r\n            'question', \r\n            {answered: isAnswered},\r\n            {hilighted: isHighligted && !isAnswered},\r\n        )}>\r\n            <p>{ content }</p>\r\n            <footer>\r\n                <div className=\"user-info\">\r\n                    <img src={ author.avatar } alt={ author.name } />\r\n                    <span>{ author.name }</span>\r\n                </div>\r\n                <div>{ children }</div>\r\n            </footer>\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from '../assets/images/copy.svg';\r\n\r\nimport '../styles/roomCode.scss';\r\n\r\ntype RoomCodeProps = { \r\n    code: string;\r\n}\r\n\r\nexport function RoomCode(props: RoomCodeProps) {\r\n\r\n    function copyRoomCodyToClipBoard(){\r\n        navigator.clipboard.writeText(props.code);\r\n    }\r\n\r\n    return(\r\n        <button className=\"room-code\" onClick={ copyRoomCodyToClipBoard }>\r\n            <div>\r\n                <img src={ copyImg } alt=\"Copiar código da sala\" />\r\n            </div>\r\n            <span>Sala #{ props.code }</span>\r\n        </button>\r\n    )\r\n}","import { useContext } from \"react\";\r\nimport { AuthContext } from \"../contexts/AuthContext\";\r\n\r\nexport function useAuth() {\r\n    const value =  useContext(AuthContext);\r\n\r\n    return value;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { database } from \"../services/firebase\";\r\nimport { useAuth } from \"./useAuth\";\r\n\r\ntype FirebaseQuestions = Record<\r\n  string,\r\n  {\r\n    author: {\r\n      name: string;\r\n      avatar: string;\r\n    };\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighligted: boolean;\r\n    likes: Record<string, {\r\n      authorId: string;\r\n    }>\r\n  }\r\n>;\r\n\r\ntype QuestionType = {\r\n    id: string;\r\n    author: {\r\n      name: string;\r\n      avatar: string;\r\n    };\r\n    content: string;\r\n    isAnswered: boolean;\r\n    isHighligted: boolean;\r\n    likeCount: number;\r\n    likeId: string | undefined;\r\n  };\r\n\r\nexport function useRoom(roomId: string) {\r\n  const { user } = useAuth();\r\n    const [questions, setQuestions] = useState<QuestionType[]>([]);\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n  //aqui ele vai buscar as perguntas e recarregar as novas\r\n  useEffect(() => {\r\n    const roomRef = database.ref(`rooms/${roomId}`);\r\n\r\n   roomRef.on(\"value\", (room) => {\r\n      //tras todas as perguntas\r\n      const databaseRoom = room.val();\r\n      //busca as perguntas completas\r\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n\r\n      //trata os dados das perguntas que estão no banco para exibição como chave valor\r\n      const parsedQuestions = Object.entries(firebaseQuestions).map(\r\n        ([key, value]) => {\r\n          return {\r\n            id: key,\r\n            content: value.content,\r\n            author: value.author,\r\n            isHighligted: value.isHighligted,\r\n            isAnswered: value.isAnswered,\r\n            likeCount: Object.values(value.likes ?? {}).length,\r\n            likeId: Object.entries(value.likes ?? {}).find(([key,like]) => like.authorId === user?.id)?.[0],\r\n          }\r\n        }\r\n      );\r\n\r\n      //muda o titulo da página para o nome cadastrado\r\n      setTitle(databaseRoom.title);\r\n      setQuestions(parsedQuestions);\r\n    });\r\n\r\n    return () => {\r\n      roomRef.off('value');\r\n    }\r\n  }, [roomId, user?.id]);\r\n\r\n  return { questions, title }\r\n}","//lib rotas\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n//imagens\r\nimport logoImg from \"../assets/images/logo.svg\";\r\nimport deleteImg from \"../assets/images/delete.svg\";\r\nimport checkImg from '../assets/images/check.svg';\r\nimport answerImg from '../assets/images/answer.svg';\r\n//componentes\r\nimport { Button } from \"../components/Button\";\r\nimport { Question } from \"../components/Question\";\r\nimport { RoomCode } from \"../components/RoomCode\";\r\n//hooks\r\nimport { useRoom } from \"../hooks/useRoom\";\r\n//scss\r\nimport \"../styles/room.scss\";\r\nimport { database } from \"../services/firebase\";\r\n\r\ntype RoomsParms = {\r\n  id: string;\r\n};\r\n\r\nexport function AdminRoom() {\r\n  //const { user } = useAuth();\r\n  const history = useHistory();\r\n  const params = useParams<RoomsParms>();\r\n  const roomId = params.id;\r\n\r\n  //aqui ele busca as perguntas\r\n  const { title, questions } = useRoom(roomId);\r\n\r\n  //fecha a sala\r\n  async function heandleEndRoom() {\r\n   await database.ref(`rooms/${roomId}`).update({\r\n     endedAt: new Date(),\r\n   })\r\n   history.push('/');\r\n  }\r\n //deleta a pergunta\r\n  async function heandleDeleteQuestion(questionId: string) {\r\n    if(window.confirm('Você tem certeza que deseja excluir essa pergunta?')) {\r\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\r\n    }\r\n  }\r\n  //mostra a pergunta que vai ser respondida\r\n  async function heandleCheckQuestionAsAnswered(questionId: string) {\r\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({ \r\n      isAnswered: true\r\n    })\r\n  }\r\n //deixa a pergunta marcada\r\n  async function heandleHighligthQuestion(questionId: string) {\r\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({ \r\n      isHighligted: true\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-room\">\r\n      <header>\r\n        <div className=\"content\">\r\n          <img src={logoImg} alt=\"Letmeask\" />\r\n          <div>\r\n            <RoomCode code={roomId} />\r\n            <Button isOutlined onClick={heandleEndRoom}>Encerrar sala</Button>\r\n          </div>\r\n         \r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"room-title\">\r\n          <h1>Sala {title}</h1>\r\n          {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n        </div>\r\n\r\n        <div className=\"question-list\">\r\n          {questions.map((question) => {\r\n            return (\r\n              <Question \r\n              key={question.id}\r\n              content={question.content} \r\n              author={question.author}\r\n              isAnswered={question.isAnswered}\r\n              isHighligted={question.isHighligted}\r\n              >\r\n\r\n               {!question.isAnswered && (  \r\n                 <>\r\n                  <button\r\n                      type=\"button\"\r\n                      onClick={ () => heandleCheckQuestionAsAnswered(question.id)}\r\n                    >\r\n                      <img src={checkImg} alt=\"Marcar a pergunta que está sendo respondida.\" />\r\n                    </button>\r\n\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={ () => heandleHighligthQuestion(question.id)}\r\n                    >\r\n                      <img src={answerImg} alt=\"Dar destaque a pergunta\" />\r\n                    </button> \r\n                </>\r\n                )}\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={ () => heandleDeleteQuestion(question.id)}\r\n                >\r\n                  <img src={deleteImg} alt=\"Deletar pergunta\" />\r\n                </button>\r\n              </Question>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","//rotas\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n//imagens\r\nimport ilustrationImg from \"../assets/images/illustration.svg\";\r\nimport logoImg from \"../assets/images/logo.svg\";\r\nimport googleIconUmg from \"../assets/images/google-icon.svg\";\r\n\r\n//scss\r\nimport \"../styles/auth.scss\";\r\n\r\n//outros\r\nimport { Button } from \"../components/Button\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { FormEvent, useState } from \"react\";\r\nimport { database } from \"../services/firebase\";\r\nimport { useTheme, } from \"../hooks/usetTheme\";\r\n\r\nexport function Home() {\r\n  //estados\r\n  const history = useHistory();\r\n  const { user, signInWithGoogle } = useAuth();\r\n  const { theme, toggleTheme } = useTheme();\r\n  const [ roomCode, setRoomCode ] = useState('');\r\n\r\n  async function heandleCreateRoom() {\r\n    if (!user) {\r\n      await signInWithGoogle();\r\n    }\r\n    history.push(\"/rooms/new\");\r\n  }\r\n\r\n  async function heandleJoinRoom(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if(roomCode.trim() === ''){\r\n      return;\r\n    }\r\n    //procurando a sala pelo id que o estado da room oferece\r\n    const roomRef = await database.ref(`rooms/${roomCode}`).get();\r\n\r\n    //verifica se a sala existe\r\n    if(!roomRef.exists()) {\r\n      //exibe um alerta caso ela não exista\r\n      alert('Essa sala não existe!');\r\n      return;\r\n    }\r\n    //verificar se a sala está aberta pela data\r\n    if(roomRef.val().endedAt) {\r\n      alert('Está sala já está fechada!');\r\n      return;\r\n    }\r\n    //se ela existir me manda para ela\r\n    history.push(`/rooms/${roomCode}`);\r\n\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-auth\" className={theme}>\r\n      <aside>\r\n        <img\r\n          src={ilustrationImg}\r\n          alt=\"Ilustração simbolizando as perguntas e respostas\"\r\n        />\r\n        <strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n        <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n      </aside>\r\n      <main>\r\n        <div className=\"main-content\">\r\n\r\n          <h1>{theme}</h1>\r\n          <button onClick={ toggleTheme }>Toggle</button>\r\n\r\n          <img src={logoImg} alt=\"Logo do LetMeAsk\" />\r\n          <button onClick={ heandleCreateRoom } className=\"create-room\">\r\n            <img src={googleIconUmg} alt=\"Logo do google\" />\r\n            Crie sua Sala com o Google\r\n          </button>\r\n          <div className=\"separator\">Ou entre em uma sala</div>\r\n          <form onSubmit={ heandleJoinRoom }>\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Digite o código da sala\"\r\n            onChange={event =>setRoomCode(event.target.value)}\r\n            value= {roomCode} \r\n            />\r\n            <Button type=\"submit\">Entrar na sala</Button>\r\n          </form>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import { useContext } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext'\r\n\r\nexport function useTheme() {\r\n  const value = useContext(ThemeContext)\r\n\r\n  return value;\r\n}","import { Link, useHistory } from \"react-router-dom\";\r\nimport { FormEvent, useState } from 'react';\r\n\r\nimport ilustrationImg from \"../assets/images/illustration.svg\";\r\nimport logoImg from \"../assets/images/logo.svg\";\r\nimport { Button } from \"../components/Button\";\r\nimport \"../styles/auth.scss\";\r\nimport { database } from \"../services/firebase\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\n\r\nexport function NewRoom() {\r\n  const [newRoom , setNewRoom] = useState('');\r\n  const { user } =useAuth();\r\n  const history = useHistory();\r\n\r\n  async function handleCreateRoom(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if(newRoom.trim()==='') {\r\n      return;\r\n    }\r\n    const roomRef = database.ref('rooms');\r\n\r\n    const firebaseRoom = await roomRef.push({\r\n      title: newRoom,\r\n      authorId: user?.id,\r\n\r\n    });\r\n    history.push(`/rooms/${firebaseRoom.key}`);\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-auth\">\r\n      <aside>\r\n        <img\r\n          src={ilustrationImg}\r\n          alt=\"Ilustração simbolizando as perguntas e respostas\"\r\n        />\r\n        <strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n        <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n      </aside>\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImg} alt=\"Logo do LetMeAsk\" />\r\n          <h2>Criar uma nova sala</h2>\r\n          <form onSubmit={ handleCreateRoom }>\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Nome da Sala\" \r\n            onChange= { event => setNewRoom(event.target.value)}\r\n            value = { newRoom }\r\n            \r\n            />\r\n            <Button type=\"submit\">Criar Sala</Button>\r\n          </form>\r\n          <p>\r\n            Quer entrar em uma sala existente?<Link to=\"/\">Clique aqui</Link>\r\n          </p>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","//libs react\r\nimport { FormEvent, useState } from \"react\";\r\n//lib rotas\r\nimport { useParams } from \"react-router-dom\";\r\n//imagens\r\nimport logoImg from \"../assets/images/logo.svg\";\r\n//componentes\r\nimport { Button } from \"../components/Button\";\r\nimport { Question } from \"../components/Question\";\r\nimport { RoomCode } from \"../components/RoomCode\";\r\n//hooks\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { useRoom } from \"../hooks/useRoom\";\r\n//banco\r\nimport { database } from \"../services/firebase\";\r\n//scss\r\nimport \"../styles/room.scss\";\r\n\r\n\r\ntype RoomsParms = {\r\n  id: string;\r\n};\r\nexport function Room() {\r\n  const { user } = useAuth();\r\n  const params = useParams<RoomsParms>();\r\n  const [newQuestion, setNewQuestion] = useState(\"\");\r\n  const roomId = params.id;\r\n  const { title, questions } = useRoom(roomId);\r\n  \r\n\r\n  //enviar a pergunta e validar o usuario logado\r\n  async function handleSendQuestion(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (newQuestion.trim() === \"\") {\r\n      return;\r\n    }\r\n    if (!user) {\r\n      throw new Error(\"Você precisa estar Logado!\");\r\n    }\r\n\r\n    const question = {\r\n      content: newQuestion,\r\n      author: {\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n      },\r\n      isHighligted: false,\r\n      isAnswered: false,\r\n    };\r\n\r\n    await database.ref(`rooms/${roomId}/questions`).push(question);\r\n    setNewQuestion(\"\");\r\n  }\r\n\r\n  //função para dar o like\r\n  async function heandleLikeQuestion(questionId: string, likeId: string | undefined) {\r\n     if(likeId) {\r\n      await database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove();\r\n     }else {\r\n       await database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push({\r\n         authorId: user?.id,\r\n       })\r\n     }\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-room\">\r\n      <header>\r\n        <div className=\"content\">\r\n          <img src={logoImg} alt=\"Letmeask\" />\r\n          <RoomCode code={roomId} />\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"room-title\">\r\n          <h1>Sala {title}</h1>\r\n          {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n        </div>\r\n\r\n        <form onSubmit={handleSendQuestion}>\r\n          <textarea\r\n            placeholder=\"O que você quer perguntar?\"\r\n            onChange={(event) => setNewQuestion(event.target.value)}\r\n            value={newQuestion}\r\n          />\r\n          <div className=\"form-footer\">\r\n            {user ? (\r\n              <div className=\"user-info\">\r\n                <img src={user.avatar} alt={user.name} />\r\n                <span>{user.name}</span>\r\n              </div>\r\n            ) : (\r\n              <span>\r\n                Para enviar uma pergunta, <button>faça seu login.</button>\r\n              </span>\r\n            )}\r\n            <Button type=\"submit\" disabled={!user}>\r\n              Enviar Pergunta\r\n            </Button>\r\n          </div>\r\n        </form>\r\n        <div className=\"question-list\">\r\n          {questions.map((question) => {\r\n            return (\r\n              <Question \r\n                key={question.id}\r\n                content={question.content} \r\n                author={question.author}\r\n                isAnswered={question.isAnswered}\r\n                isHighligted={question.isHighligted}\r\n              >\r\n               { !question.isAnswered && (\r\n                  <button\r\n                  className={`like-button ${question.likeId ? 'liked' : '' }`}\r\n                    type=\"button\"\r\n                    aria-label=\"Marcar como gostei\"\r\n                    onClick={ ()=> heandleLikeQuestion(question.id, question.likeId) }\r\n                >\r\n                  { question.likeCount > 0 && <span> {question.likeCount} </span> }\r\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                  </svg>\r\n                </button>\r\n               )}\r\n              </Question>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { AuthContextProvider } from './contexts/AuthContext';\nimport { ThemeContextProvider } from \"./contexts/ThemeContext\";\nimport { AdminRoom } from \"./pages/AdminRoom\";\n\n//componentes\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { Room } from \"./pages/Room\";\n\n\nfunction App() {\n \n  return (\n    <BrowserRouter>\n    <ThemeContextProvider>\n     <AuthContextProvider>\n       <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/rooms/new\" component={NewRoom} />\n        <Route path=\"/rooms/:id\" component={Room} />\n        <Route path=\"/admin/rooms/:id\" component={AdminRoom} />\n       </Switch>\n      </AuthContextProvider>\n      </ThemeContextProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './services/firebase';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}